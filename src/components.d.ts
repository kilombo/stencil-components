/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/router';

import '@ionic/core';

import {
  MatchResults,
} from '@stencil/router';

declare global {
  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;
  }
}



import {
  AppFullWidthComponent as AppFullWidthComponent
} from './components/app-full-width-component/app-full-width-component';

declare global {
  interface HTMLAppFullWidthComponentElement extends AppFullWidthComponent, HTMLStencilElement {
  }
  var HTMLAppFullWidthComponentElement: {
    prototype: HTMLAppFullWidthComponentElement;
    new (): HTMLAppFullWidthComponentElement;
  };
  interface HTMLElementTagNameMap {
    "app-full-width-component": HTMLAppFullWidthComponentElement;
  }
  interface ElementTagNameMap {
    "app-full-width-component": HTMLAppFullWidthComponentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "app-full-width-component": JSXElements.AppFullWidthComponentAttributes;
    }
  }
  namespace JSXElements {
    export interface AppFullWidthComponentAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  AppHome as AppHome
} from './components/app-home/app-home';

declare global {
  interface HTMLAppHomeElement extends AppHome, HTMLStencilElement {
  }
  var HTMLAppHomeElement: {
    prototype: HTMLAppHomeElement;
    new (): HTMLAppHomeElement;
  };
  interface HTMLElementTagNameMap {
    "app-home": HTMLAppHomeElement;
  }
  interface ElementTagNameMap {
    "app-home": HTMLAppHomeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "app-home": JSXElements.AppHomeAttributes;
    }
  }
  namespace JSXElements {
    export interface AppHomeAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  AppLoginFirebase as AppLoginFirebase
} from './components/app-login-firebase/app-login-firebase';

declare global {
  interface HTMLAppLoginFirebaseElement extends AppLoginFirebase, HTMLStencilElement {
  }
  var HTMLAppLoginFirebaseElement: {
    prototype: HTMLAppLoginFirebaseElement;
    new (): HTMLAppLoginFirebaseElement;
  };
  interface HTMLElementTagNameMap {
    "app-login-firebase": HTMLAppLoginFirebaseElement;
  }
  interface ElementTagNameMap {
    "app-login-firebase": HTMLAppLoginFirebaseElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "app-login-firebase": JSXElements.AppLoginFirebaseAttributes;
    }
  }
  namespace JSXElements {
    export interface AppLoginFirebaseAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  AppPostsFirestore as AppPostsFirestore
} from './components/app-posts-firestore/app-posts-firestore';

declare global {
  interface HTMLAppPostsFirestoreElement extends AppPostsFirestore, HTMLStencilElement {
  }
  var HTMLAppPostsFirestoreElement: {
    prototype: HTMLAppPostsFirestoreElement;
    new (): HTMLAppPostsFirestoreElement;
  };
  interface HTMLElementTagNameMap {
    "app-posts-firestore": HTMLAppPostsFirestoreElement;
  }
  interface ElementTagNameMap {
    "app-posts-firestore": HTMLAppPostsFirestoreElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "app-posts-firestore": JSXElements.AppPostsFirestoreAttributes;
    }
  }
  namespace JSXElements {
    export interface AppPostsFirestoreAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  AppProfile as AppProfile
} from './components/app-profile/app-profile';

declare global {
  interface HTMLAppProfileElement extends AppProfile, HTMLStencilElement {
  }
  var HTMLAppProfileElement: {
    prototype: HTMLAppProfileElement;
    new (): HTMLAppProfileElement;
  };
  interface HTMLElementTagNameMap {
    "app-profile": HTMLAppProfileElement;
  }
  interface ElementTagNameMap {
    "app-profile": HTMLAppProfileElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "app-profile": JSXElements.AppProfileAttributes;
    }
  }
  namespace JSXElements {
    export interface AppProfileAttributes extends HTMLAttributes {
      match?: MatchResults;
    }
  }
}


import {
  ContactForm as ContactForm
} from './components/contact-form/contact-form';

declare global {
  interface HTMLContactFormElement extends ContactForm, HTMLStencilElement {
  }
  var HTMLContactFormElement: {
    prototype: HTMLContactFormElement;
    new (): HTMLContactFormElement;
  };
  interface HTMLElementTagNameMap {
    "contact-form": HTMLContactFormElement;
  }
  interface ElementTagNameMap {
    "contact-form": HTMLContactFormElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "contact-form": JSXElements.ContactFormAttributes;
    }
  }
  namespace JSXElements {
    export interface ContactFormAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  FullWidthComponent as FullWidthComponent
} from './components/full-width-component/full-width-component';

declare global {
  interface HTMLFullWidthComponentElement extends FullWidthComponent, HTMLStencilElement {
  }
  var HTMLFullWidthComponentElement: {
    prototype: HTMLFullWidthComponentElement;
    new (): HTMLFullWidthComponentElement;
  };
  interface HTMLElementTagNameMap {
    "full-width-component": HTMLFullWidthComponentElement;
  }
  interface ElementTagNameMap {
    "full-width-component": HTMLFullWidthComponentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "full-width-component": JSXElements.FullWidthComponentAttributes;
    }
  }
  namespace JSXElements {
    export interface FullWidthComponentAttributes extends HTMLAttributes {
      imagePath?: string;
      title?: string;
      titleColor?: string;
    }
  }
}


import {
  LoginFirebase as LoginFirebase
} from './components/login-firebase/login-firebase';

declare global {
  interface HTMLLoginFirebaseElement extends LoginFirebase, HTMLStencilElement {
  }
  var HTMLLoginFirebaseElement: {
    prototype: HTMLLoginFirebaseElement;
    new (): HTMLLoginFirebaseElement;
  };
  interface HTMLElementTagNameMap {
    "login-firebase": HTMLLoginFirebaseElement;
  }
  interface ElementTagNameMap {
    "login-firebase": HTMLLoginFirebaseElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "login-firebase": JSXElements.LoginFirebaseAttributes;
    }
  }
  namespace JSXElements {
    export interface LoginFirebaseAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  MomentjsExample as MomentjsExample
} from './components/momentjs-example/momentjs-example';

declare global {
  interface HTMLMomentjsExampleElement extends MomentjsExample, HTMLStencilElement {
  }
  var HTMLMomentjsExampleElement: {
    prototype: HTMLMomentjsExampleElement;
    new (): HTMLMomentjsExampleElement;
  };
  interface HTMLElementTagNameMap {
    "momentjs-example": HTMLMomentjsExampleElement;
  }
  interface ElementTagNameMap {
    "momentjs-example": HTMLMomentjsExampleElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "momentjs-example": JSXElements.MomentjsExampleAttributes;
    }
  }
  namespace JSXElements {
    export interface MomentjsExampleAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  MyApp as MyApp
} from './components/my-app/my-app';

declare global {
  interface HTMLMyAppElement extends MyApp, HTMLStencilElement {
  }
  var HTMLMyAppElement: {
    prototype: HTMLMyAppElement;
    new (): HTMLMyAppElement;
  };
  interface HTMLElementTagNameMap {
    "my-app": HTMLMyAppElement;
  }
  interface ElementTagNameMap {
    "my-app": HTMLMyAppElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "my-app": JSXElements.MyAppAttributes;
    }
  }
  namespace JSXElements {
    export interface MyAppAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  PostsFirestore as PostsFirestore
} from './components/posts-firestore/posts-firestore';

declare global {
  interface HTMLPostsFirestoreElement extends PostsFirestore, HTMLStencilElement {
  }
  var HTMLPostsFirestoreElement: {
    prototype: HTMLPostsFirestoreElement;
    new (): HTMLPostsFirestoreElement;
  };
  interface HTMLElementTagNameMap {
    "posts-firestore": HTMLPostsFirestoreElement;
  }
  interface ElementTagNameMap {
    "posts-firestore": HTMLPostsFirestoreElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "posts-firestore": JSXElements.PostsFirestoreAttributes;
    }
  }
  namespace JSXElements {
    export interface PostsFirestoreAttributes extends HTMLAttributes {
      numberOfItems?: number;
      orderField?: string;
    }
  }
}


import {
  SocialLinks as SocialLinks
} from './components/social-links/social-links';

declare global {
  interface HTMLSocialLinksElement extends SocialLinks, HTMLStencilElement {
  }
  var HTMLSocialLinksElement: {
    prototype: HTMLSocialLinksElement;
    new (): HTMLSocialLinksElement;
  };
  interface HTMLElementTagNameMap {
    "social-links": HTMLSocialLinksElement;
  }
  interface ElementTagNameMap {
    "social-links": HTMLSocialLinksElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "social-links": JSXElements.SocialLinksAttributes;
    }
  }
  namespace JSXElements {
    export interface SocialLinksAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  SocialTwitterLink as SocialTwitterLink
} from './components/social-twitter-link/social-twitter-link';

declare global {
  interface HTMLSocialTwitterLinkElement extends SocialTwitterLink, HTMLStencilElement {
  }
  var HTMLSocialTwitterLinkElement: {
    prototype: HTMLSocialTwitterLinkElement;
    new (): HTMLSocialTwitterLinkElement;
  };
  interface HTMLElementTagNameMap {
    "social-twitter-link": HTMLSocialTwitterLinkElement;
  }
  interface ElementTagNameMap {
    "social-twitter-link": HTMLSocialTwitterLinkElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "social-twitter-link": JSXElements.SocialTwitterLinkAttributes;
    }
  }
  namespace JSXElements {
    export interface SocialTwitterLinkAttributes extends HTMLAttributes {
      color?: string;
      href?: string;
      isText?: boolean;
      target?: string;
      width?: string;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
